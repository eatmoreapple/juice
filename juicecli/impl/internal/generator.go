package internal

import (
	"fmt"
	"io"
	"os"
	"strings"

	"github.com/eatmoreapple/juice"
)

type Generator struct {
	cfg       *juice.Configuration
	impl      *Implement
	namespace string
	writer    io.Writer
}

func (g *Generator) Generate() error {
	for _, method := range g.impl.methods {
		key := fmt.Sprintf("%s.%s", g.namespace, method.Name)
		statement, err := g.cfg.Mappers.GetStatementByID(key)
		if err != nil {
			return err
		}
		if statement.Attribute("gen") == "false" || statement.Attribute("generate") == "false" { // skip
			method.Body = nil
			continue
		}
		maker := FunctionBodyMaker{statement: statement, function: method}
		if err = maker.Make(); err != nil {
			return err
		}
	}
	g.impl.ExtraImports = append(g.impl.ExtraImports, juiceImport)
	builder := strings.Builder{}
	args := strings.Join(os.Args[:], " ")
	builder.WriteString(fmt.Sprintf("// Code generated by \"%s\"; DO NOT EDIT.", args))
	builder.WriteString("\n\n")
	builder.WriteString(g.impl.String())
	_, err := io.WriteString(g.writer, builder.String())
	return err
}

func (g *Generator) Close() error {
	if closer, ok := g.writer.(io.Closer); ok {
		return closer.Close()
	}
	return nil
}
